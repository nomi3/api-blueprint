openapi: "3.0.3"

info:
  title: "Sample API"
  description: |
    # aaaaa
    - aaaaa
    - bbbbb

  version: "1.0.1"

servers:
  - url: "http://localhost:{port}"
    description: "Local development"
    variables:
      port:
        enum: ["3000", "8080"]
        default: "3000"
  - url: "https:/it1.test.com"
    description: "Integration Test"
  - url: "https://stg.test.com"
    description: "Staging"
  - url: "https://api.test.com"
    description: "Production"

tags:
  - name: "reviews"
    description: "review description"

paths:
  "/shops/{shopId}/reviews":
    parameters:
      - $ref: "#components/parameters/ShopId"
    get:
      summary: "Get shop reviews"
      description: "(desc) Get shop reviews"
      tags: ["reviews"]
      deprecated: false
      responses:
        "200":
          description: "Succcess"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Review"
    post:
      summary: "Create review"
      tags: ["reviews"]
      deprecated: false
      parameters:
        - name: X-Api-Key
          in: header
          description: "request user's identifier"
          schema: {type: string}
          example: "XXXX-XXXX-XXXX-XXXX"
        - name: token
          in: cookie
          description: "One time token"
          schema: {type: string}
          example: "XXXX-XXXX-XXXX-XXXX"
      requestBody:
        description: "contents of review"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Review"

      responses:
        "201":
          description: "Succcess"
          headers:
            location:
              description: "New URL of created review"
              schema: {type: string, format: url}
        "400":
          $ref: "#/components/responses/400-BadRequest"



components:
  responses:
    400-BadRequest:
      description: "Client side error"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ClientError"

  parameters:
    ShopId:
      name: shopId
      in: path
      required: true
      schema: {type: string}
  schemas:
    ClientError:
      type: object
      properties:
        code: {type: string}
        type: {type: string}
        message: {type: string}
        errors:
          type: array
          items:
            type: object
            properties:
              field: {type: string}
              code: {type: string}
    Review:
      type: object
      properties:
        score: {type: integer, example: 3}
        comment: {type: string, example: "delicious"}
    SampleInt:
      type: integer
      minimum: 0
      exclusiveMinimum: false
      maximum: 100
      exclusiveMaximum: true
    SampleString:
      type: string
      nullable: true
      minLength: 10
      maxLength: 20
    SampleBoolean:
      type: boolean
    SampleObject:
      type: object
      properties:
        shop:
          type: object
          properties:
            name: {type: string}
            place: {type: string}
        reviews:
          type: array
          items:
            type: object
            properties:
              score:
                type: integer
                enum: [1,2,3,4,5]
              comment:
                type: string